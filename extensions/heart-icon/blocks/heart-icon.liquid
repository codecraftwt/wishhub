<div id="wishlist-app-embed">
  <script defer src="https://cdn.jsdelivr.net/npm/alpinejs@3.x.x/dist/cdn.min.js"></script>
  <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/toastr.js/latest/toastr.min.css">
  <script src="https://cdnjs.cloudflare.com/ajax/libs/toastr.js/latest/toastr.min.js"></script>

  <script>
    document.addEventListener('DOMContentLoaded', () => {
      toastr.options = {
        closeButton: true,
        newestOnTop: true,
        progressBar: true,
        positionClass: 'toast-top-right',
        showDuration: '300',
        hideDuration: '1000',
        timeOut: '3000',
        extendedTimeOut: '1000',
        showEasing: 'swing',
        hideEasing: 'linear',
        showMethod: 'fadeIn',
        hideMethod: 'fadeOut',
      };

      const apiUrl = '{{ block.settings.api_url }}';
      const customerId = '{{ customer.id }}' || null;


      const extractProductInfo = (card) => {
       
        let productId =
          card.dataset.productId ||
          card.getAttribute('data-product-id') ||
          card.querySelector('form[action*="/cart/add"] input[name="id"]')?.value ||
          card.querySelector('input[type="hidden"][name*="product" i],input[type="hidden"][id*="product" i]')?.value ||
          (() => {
            let el = card.querySelector('[id^="CardLink-"],[id^="StandardCardNoMediaLink-"]');
            if (el && el.id) {
              let match = el.id.match(/-(\d+)$/);
              return match ? match[1] : null;
            }
            return null;
          })() ||
          (() => {
            let a = card.querySelector('a[href*="/products/"]');
            if (a) {
              return a.closest('div')?.querySelector('input[name="id"]')?.value || null;
            }
            return null;
          })() ||
          (() => {
            let m = Array.from(card.querySelectorAll('[id]')).map(el => el.id.match(/\d{6,}/)).find(Boolean);
            return m ? m[0] : null;
          })() ||
          null;

        let productTitle =
          card.dataset.productTitle ||
          card.getAttribute('data-product-title') ||
          card.querySelector('h2, h3, [class*="heading"], [class*="title"]')?.innerText?.trim() ||
          card.querySelector('a.full-unstyled-link')?.innerText?.trim() ||
          'Product';

        let productImg =
          card.dataset.productImg ||
          card.querySelector('img')?.src ||
          '';

        let price = '';
        const priceElement = card.querySelector('.price,[data-price],[class*="price"]');
        if (priceElement) {
          price = priceElement.textContent.replace(/[^\d.]/g, '');
        } else {
          price = card.dataset.price || card.getAttribute('data-price') || '';
        }

        if (price && !price.includes('.')) {
          price = (parseFloat(price) / 100).toFixed(2);
        }

        return { productId, productTitle, productImg, price };
      };

      const injectHeart = (card) => {
        if (card.querySelector('.catalog-heart')) return;

        const { productId, productTitle, productImg, price } = extractProductInfo(card);
        if (!productId) return; // Don't inject if ID missing

        const heartDiv = document.createElement('div');
        heartDiv.classList.add('catalog-heart');
        heartDiv.dataset.customerId = customerId || '';
        heartDiv.dataset.productId = productId;
        heartDiv.dataset.productTitle = productTitle;
        heartDiv.dataset.price = price;
        heartDiv.dataset.productImg = productImg;

        let position = '{{ block.settings.position }}';
        heartDiv.style.position = 'absolute';
        if (position.includes('top')) heartDiv.style.top = '10px';
        if (position.includes('bottom')) heartDiv.style.bottom = '10px';
        if (position.includes('left')) heartDiv.style.left = '10px';
        if (position.includes('right')) heartDiv.style.right = '10px';

        if (getComputedStyle(card).position === 'static') card.style.position = 'relative';

        heartDiv.innerHTML = `
          <div x-data="wishlist" x-init="init()" x-cloak>
            <template x-if="!isWishlisted">
              <div>
                <svg @click="toggleWishlist()" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" class="icon-heart" aria-hidden="true">
                  <path d="M12 21.35l-1.45-1.32C5.4 15.36 2 12.28 2 8.5
                      2 5.42 4.42 3 7.5 3c1.74 0 3.41 0.81 4.5 2.09
                      C13.09 3.81 14.76 3 16.5 3 19.58 3 22 5.42 22 8.5
                      c0 3.78-3.4 6.86-8.55 11.54L12 21.35z"/>
                </svg>
              </div>
            </template>
            <template x-if="isWishlisted">
              <div>
                <svg @click="toggleWishlist()" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" class="icon-heart filled" aria-hidden="true">
                  <path d="M12 21.35l-1.45-1.32C5.4 15.36 2 12.28 2 8.5
                      2 5.42 4.42 3 7.5 3c1.74 0 3.41 0.81 4.5 2.09
                      C13.09 3.81 14.76 3 16.5 3 19.58 3 22 5.42 22 8.5
                      c0 3.78-3.4 6.86-8.55 11.54L12 21.35z"/>
                </svg>
              </div>
            </template>
          </div>
        `;
        card.appendChild(heartDiv);
        Alpine.initTree(heartDiv);
      };

      const addHeartsToAllCards = () => {
        const cards = document.querySelectorAll(
          '.product-card, .card-wrapper, [data-product-id], [data-product-title]'
        );
        cards.forEach((card) => {
          const hasImg = card.querySelector('img');
          if (hasImg) injectHeart(card);
        });
      };

      addHeartsToAllCards();

      const observer = new MutationObserver((mutations) => {
        mutations.forEach((mutation) => {
          mutation.addedNodes.forEach((node) => {
            if (
              node.nodeType === 1 &&
              node.matches('.product-card, .grid__item, .card-wrapper, [data-product-id], [data-product-title]')
            ) {
              addHeartsToAllCards();
            }
          });
        });
      });
      observer.observe(document.body, { childList: true, subtree: true });
    });

    document.addEventListener('alpine:init', () => {
      Alpine.data('wishlist', () => ({
        apiUrl: '{{ block.settings.api_url }}',
        customerId: null,
        productId: null,
        productTitle: null,
        price: null,
        productImage: null,
        wishlist: [],
        allWishlistData: [],
        isWishlisted: false,

        async init() {
          const el = this.$el.closest('.catalog-heart');
          if (!el) {
            console.error('Wishlist init error: .catalog-heart element not found');
            return;
          }
          this.customerId = el.dataset.customerId || null;
          this.productId = el.dataset.productId || null;
          this.productTitle = el.dataset.productTitle || '';
          this.price = el.dataset.price || '';
          this.productImage = el.dataset.productImg || '';
          await this.fetchWishlist();
          this.isWishlisted = this.wishlist.includes(String(this.productId));
        },

        async fetchWishlist() {
          if (this.customerId) {
            try {
              const res = await fetch(`${this.apiUrl}/api/wishlist?customerId=${this.customerId}`, {
                credentials: 'include',
              });
              if (res.ok) {
                const data = await res.json();
                this.allWishlistData = data.wishlists || [];
                this.wishlist = this.allWishlistData.map((i) => String(i.productId || i.id));
              }
            } catch (e) {
              console.error(e);
            }
          } else {
            const guest = JSON.parse(localStorage.getItem('guestWishlist') || '[]');
            this.allWishlistData = guest;
            this.wishlist = guest.map((i) => String(i.productId));
          }
        },

        toggleWishlist() {
          this.isWishlisted ? this.remove() : this.addtoWishlist();
        },

        async addtoWishlist() {
          this.isWishlisted = true;
          if (this.customerId) {
            const formData = new FormData();
            formData.append('customerId', this.customerId);
            formData.append('isLoggedIn', 'true');
            formData.append('productId', this.productId);
            formData.append('productTitle', this.productTitle);
            formData.append('quantity', '1');
            formData.append('price', this.price);
            formData.append('shop', '{{shop.permanent_domain}}');
            formData.append('productImage', this.productImage);
            formData.append('_action', 'CREATE');
            try {
              const res = await fetch(`${this.apiUrl}/api/wishlist`, {
                method: 'POST',
                body: formData,
                credentials: 'include',
              });
              const data = await res.json().catch(() => ({}));
              if (res.ok && data.ok) {
                await this.fetchWishlist();
                toastr.success('Added to Wishlist!');
              } else {
                this.isWishlisted = false;
                toastr.error('Failed to add');
              }
            } catch (err) {
              this.isWishlisted = false;
              toastr.error('Error');
            }
          } else {
            const guest = JSON.parse(localStorage.getItem('guestWishlist') || '[]');
            if (!guest.find((i) => i.productId === this.productId)) {
              guest.push({
                productId: this.productId,
                productTitle: this.productTitle,
                price: this.price,
                productImage: this.productImage,
                quantity: 1,
                shop: '{{shop.permanent_domain}}',
              });
            }
            localStorage.setItem('guestWishlist', JSON.stringify(guest));
            this.allWishlistData = guest;
            this.wishlist = guest.map((i) => String(i.productId));
            toastr.success('Added to Wishlist!');
          }
        },

        async remove() {
          this.isWishlisted = false;
          if (this.customerId) {
            const formData = new FormData();
            formData.append('customerId', this.customerId);
            formData.append('isLoggedIn', 'true');
            formData.append('productId', this.productId);
            formData.append('shop', '{{shop.permanent_domain}}');
            formData.append('_action', 'DELETE');
            try {
              const res = await fetch(`${this.apiUrl}/api/wishlist`, {
                method: 'POST',
                body: formData,
                credentials: 'include',
              });
              const data = await res.json().catch(() => ({}));
              if (res.ok && data.ok) {
                await this.fetchWishlist();
                toastr.success('Removed from Wishlist!');
              } else {
                this.isWishlisted = true;
                toastr.error('Failed to remove');
              }
            } catch (err) {
              this.isWishlisted = true;
              toastr.error('Error');
            }
          } else {
            const guest = JSON.parse(localStorage.getItem('guestWishlist') || '[]');
            const idx = guest.findIndex((i) => i.productId === this.productId);
            if (idx > -1) {
              guest.splice(idx, 1);
              localStorage.setItem('guestWishlist', JSON.stringify(guest));
              this.wishlist = guest.map((i) => String(i.productId));
              toastr.success('Removed from Wishlist!');
            } else {
              this.isWishlisted = true;
              toastr.error('Item not found');
            }
          }
        },
      }));
    });
  </script>

  <style>
    .catalog-heart { z-index: 10; pointer-events: auto; }
    .icon-heart { width: 24px; height: 24px; fill: none; stroke: {{ block.settings.heart_color }}; stroke-width: 2; cursor: pointer; transition: fill 0.3s, stroke 0.3s; }
    .icon-heart.filled { fill: {{ block.settings.heart_fill_color }}; stroke: {{ block.settings.heart_fill_color }}; }
    #toast-container > .toast {
      background-color: #fff;
      border: 1px solid #ddd;
      color: #333;
      opacity: 1 !important;
      filter: none !important;
    }
    #toast-container > .toast-success {
      border-left: 4px solid #5e8e3e;
    }
    #toast-container > .toast-error {
      border-left: 4px solid #d72c0d;
    }
    #toast-container > .toast-warning {
      border-left: 4px solid #e6a700;
    }
  </style>
</div>


{% schema %}
{
  "name": "Wishlist Heart Icon",
  "target": "body",
  "settings": [
    { "type": "text", "id": "api_url", "label": "Wishlist API URL", "default": "https://wishhub.onrender.com" },
    { "type": "checkbox", "id": "show_on_collection", "label": "Show on Collection pages", "default": true },
    { "type": "checkbox", "id": "show_on_product_card", "label": "Show on Product cards", "default": true },
    { "type": "checkbox", "id": "show_on_product_page", "label": "Show on Product page", "default": false },
    { "type": "color", "id": "heart_color", "label": "Heart Icon Color", "default": "#5e8e3e" },
    { "type": "color", "id": "heart_fill_color", "label": "Filled Heart Color", "default": "#5e8e3e" },
    {
      "type": "select",
      "id": "position",
      "label": "Heart Position on Product Card",
      "options": [
        { "value": "top-left", "label": "Top Left" },
        { "value": "top-right", "label": "Top Right" },
        { "value": "bottom-left", "label": "Bottom Left" },
        { "value": "bottom-right", "label": "Bottom Right" }
      ],
      "default": "top-right"
    }
  ]
}
{% endschema %}

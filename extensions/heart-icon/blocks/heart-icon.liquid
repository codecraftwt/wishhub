<div
  x-data="wishlist"
  x-init="init()"
  x-cloak
  class="catalog-heart"
  data-customer-id="{{ customer.id }}"
  data-product-id="{{ block.settings.product.id | escape }}"
  data-product-title="{{ product.title | escape }}"
  data-price="{{ product.price | money_without_currency }}"
  data-product-img="{{ product.featured_image | img_url: 'master' }}"
>
  <template x-if="!isWishlisted">
    <div>
      <svg
        @click="toggleWishlist()"
        xmlns="http://www.w3.org/2000/svg"
        viewBox="0 0 24 24"
        class="icon-heart"
        aria-hidden="true"
      >
        <path
          d="M12 21.35l-1.45-1.32C5.4 15.36 2 12.28 2 8.5
             2 5.42 4.42 3 7.5 3c1.74 0 3.41 0.81 4.5 2.09
             C13.09 3.81 14.76 3 16.5 3 19.58 3 22 5.42 22 8.5
             c0 3.78-3.4 6.86-8.55 11.54L12 21.35z"
        />
      </svg>
    </div>
  </template>

  <template x-if="isWishlisted">
    <div>
      <svg
        @click="toggleWishlist()"
        xmlns="http://www.w3.org/2000/svg"
        viewBox="0 0 24 24"
        class="icon-heart filled"
        aria-hidden="true"
      >
        <path
          d="M12 21.35l-1.45-1.32C5.4 15.36 2 12.28 2 8.5
             2 5.42 4.42 3 7.5 3c1.74 0 3.41 0.81 4.5 2.09
             C13.09 3.81 14.76 3 16.5 3 19.58 3 22 5.42 22 8.5
             c0 3.78-3.4 6.86-8.55 11.54L12 21.35z"
        />
      </svg>
    </div>
  </template>
</div>

<!-- Toastr CSS -->
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/toastr.js/latest/toastr.min.css">
<script defer src="https://cdn.jsdelivr.net/npm/alpinejs@3.x.x/dist/cdn.min.js"></script>
<!-- jQuery (required for Toastr) -->
<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
<!-- Toastr JS -->
<script src="https://cdnjs.cloudflare.com/ajax/libs/toastr.js/latest/toastr.min.js"></script>

<script>
  // Initialize Toastr with custom settings
  toastr.options = {
    "closeButton": true,
    "debug": false,
    "newestOnTop": true,
    "progressBar": true,
    "positionClass": "toast-top-right",
    "preventDuplicates": false,
    "onclick": null,
    "showDuration": "300",
    "hideDuration": "1000",
    "timeOut": "3000",
    "extendedTimeOut": "1000",
    "showEasing": "swing",
    "hideEasing": "linear",
    "showMethod": "fadeIn",
    "hideMethod": "fadeOut"
  };

  document.addEventListener('alpine:init', () => {
    Alpine.data('wishlist', () => ({
      apiUrl : "https://wishhub.onrender.com",
      customerId: null,
      productId: null,
      productTitle: null,
      price: null,
      delete_id : null,
      wishlist: [],
      allWishlistData: [],
      isWishlisted: false,
      productImage: null,

      async init() {
        this.customerId = this.$el.dataset.customerId || null;
        await this.fetchWishlist();
        const parentElement = this.$el.closest('.catalog-heart-container');
        if (parentElement) {
            const parentProductId = parentElement.dataset.productId;
            this.productId = parentProductId;
            this.isWishlisted = this.wishlist.includes(String(parentProductId));
        } else {
            console.log('Parent div with class "catalog-heart-container" not found');
        }
      },

      async fetchWishlist() {
        try {
          // include credentials so cookies are sent/accepted
          const url = `${this.apiUrl}/api/wishlist${this.customerId ? `?customerId=${this.customerId}` : ''}`;
          const res  = await fetch(url, { credentials: "include" });
          if (!res.ok) {
            console.error("Failed to fetch wishlist:", res.status);
            return;
          }
          const data = await res.json();
          this.allWishlistData = data.wishlists || [];
          // normalize wishlist as array of productIds (string)
          this.wishlist = this.allWishlistData.map(item => String(item.productId || item.id));
        } catch (e) {
          console.error("Error fetching wishlist:", e);
        }
      },

      toggleWishlist() {
        this.isWishlisted ? this.remove() : this.addtoWishlist();
      },

      addtoWishlist() {
        const parentElement = this.$el.closest('.catalog-heart-container');
        if (parentElement) {
          this.productTitle = parentElement.dataset.productTitle;
          this.price = parentElement.dataset.price;
          this.productImage = parentElement.dataset.productImg;
        }

        // send formData (works for both guest and logged-in)
        var formData = new FormData();
        formData.append('customerId', this.customerId || '');
        formData.append('productId', this.productId);
        formData.append("productTitle", this.productTitle);
        formData.append("quantity", "1");
        formData.append("price", this.price);
        formData.append("shop", "{{shop.permanent_domain}}");
        formData.append("productImage", this.productImage);

        var requestOptions = {
          method:"POST",
          body: formData,
          redirect: 'follow',
          credentials: "include" // important for cookie flows
        };

        fetch(this.apiUrl + "/api/wishlist", requestOptions)
          .then(async (result) => {
            if (result.ok) {
              // update local state based on returned wishlists if provided
              const response = await result.json().catch(() => ({}));
              if (response.wishlists) {
                this.allWishlistData = response.wishlists;
                this.wishlist = this.allWishlistData.map(item => String(item.productId || item.id));
              }
              
              // Toastr success notification
              toastr.success('Item added to Wishlist!', 'Success', {
                timeOut: 2000,
                positionClass: "toast-top-right"
              });
              
              this.refresh();
              this.productTitle = null;
              this.price = null;
            } else {
              console.error("Add to wishlist failed", result.status);
              // Toastr error notification
              toastr.error('Failed to add item to Wishlist', 'Error', {
                timeOut: 2000
              });
            }
          })
          .catch(error => {
            console.error("error : ",error);
            // Toastr error notification
            toastr.error('Network error occurred', 'Error', {
              timeOut: 2000
            });
          });
      },

      async remove() {
        if (this.allWishlistData && this.allWishlistData.length) {
          const selectedWishlist = this.allWishlistData.filter(item => String(item.productId) === String(this.productId) || String(item.id) === String(this.productId));
          this.delete_id = selectedWishlist[0]?.id || selectedWishlist[0]?.productId;
        }

        if (!this.delete_id) {
          console.warn('No id on product, cannot delete');
          toastr.warning('Item not found in wishlist', 'Warning', {
            timeOut: 2000
          });
          return;
        }

        try {
          const res = await fetch(`${this.apiUrl}/api/wishlist`, {
            method: "POST",
            credentials: "include",
            headers: {
              "Content-Type": "application/json",
            },
            body: JSON.stringify({ action: "DELETE", id: this.delete_id, customerId: this.customerId || undefined }),
          });

          if (!res.ok) {
            throw new Error(`Delete failed: ${res.status}`);
          }

          await this.refresh();
          
          // Toastr success notification for removal
          toastr.success('Item removed from Wishlist!', 'Success', {
            timeOut: 2000,
            positionClass: "toast-top-right"
          });
        } catch (err) {
          console.error('Failed to remove wishlist item:', err);
          // Toastr error notification
          toastr.error('Failed to remove item from Wishlist', 'Error', {
            timeOut: 3000
          });
        }
      },

      async refresh() {
        try {
          await this.fetchWishlist();
          this.isWishlisted = this.wishlist.includes(String(this.productId));
        } catch (e) {
          console.error("Error refreshing wishlist:", e);
        }
      },
    }));
  });
</script>

<style>
  .icon-heart {
    width: 24px;
    height: 24px;
    fill: none;
    stroke: red;
    stroke-width: 2;
    transition: fill 0.3s ease, stroke 0.3s ease;
    cursor: pointer;
  }
  .icon-heart.filled {
    fill: red;
    stroke: red;
  }
  
#toast-container > .toast {
   background-color: #fff;
   border: 1px solid #ddd;
   color: #333;
}

#toast-container > .toast-success {
   border-left: 4px solid #5e8e3e;
}

#toast-container > .toast-error {
   border-left: 4px solid #d72c0d;
}

#toast-container > .toast-warning {
   border-left: 4px solid #e6a700;
}
</style>

{% schema %}
{
  "name": "Catalog Heart Icon",
  "target": "section",
  "settings": [
    { "type": "product", "id": "product", "label": "product", "autofill": true }
  ]
}
{% endschema %}